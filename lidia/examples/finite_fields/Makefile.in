# Makefile.in generated by automake 1.10.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/Paths.def
applexec_PROGRAMS = factorization_appl$(EXEEXT) \
	Fp_polynomial_test_appl$(EXEEXT) \
	Fp_rational_function_appl$(EXEEXT) dlp_appl$(EXEEXT) \
	fpc_appl$(EXEEXT) Fp_pol_factor_appl$(EXEEXT) \
	berlekamp_appl$(EXEEXT) can_zass_appl$(EXEEXT) \
	gf_pol_factor_appl$(EXEEXT) bit_reverse_table_appl$(EXEEXT) \
	fft_prime_appl$(EXEEXT) gf2n_appl$(EXEEXT) \
	gf2n_find_root_appl$(EXEEXT) gf2n_poly_modulus_appl$(EXEEXT) \
	gf2n_polynomial_appl$(EXEEXT) \
	gf2n_rational_function_appl$(EXEEXT) gf_pol_appl$(EXEEXT) \
	gfpn_appl$(EXEEXT) galois_field_iterator_appl$(EXEEXT) \
	dense_power_series_appl$(EXEEXT) dpsr_udigit_mod_appl$(EXEEXT) \
	sparse_power_series_appl$(EXEEXT)
subdir = examples/finite_fields
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/config.h \
	$(top_builddir)/include/LiDIA/LiDIA.h \
	$(top_builddir)/include/LiDIA/path.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(applexecdir)"
applexecPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(applexec_PROGRAMS)
am_Fp_pol_factor_appl_OBJECTS = Fp_pol_factor_appl.$(OBJEXT)
Fp_pol_factor_appl_OBJECTS = $(am_Fp_pol_factor_appl_OBJECTS)
Fp_pol_factor_appl_LDADD = $(LDADD)
Fp_pol_factor_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_Fp_polynomial_test_appl_OBJECTS =  \
	Fp_polynomial_test_appl.$(OBJEXT)
Fp_polynomial_test_appl_OBJECTS =  \
	$(am_Fp_polynomial_test_appl_OBJECTS)
Fp_polynomial_test_appl_LDADD = $(LDADD)
Fp_polynomial_test_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_Fp_rational_function_appl_OBJECTS =  \
	Fp_rational_function_appl.$(OBJEXT)
Fp_rational_function_appl_OBJECTS =  \
	$(am_Fp_rational_function_appl_OBJECTS)
Fp_rational_function_appl_LDADD = $(LDADD)
Fp_rational_function_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_berlekamp_appl_OBJECTS = berlekamp_appl.$(OBJEXT)
berlekamp_appl_OBJECTS = $(am_berlekamp_appl_OBJECTS)
berlekamp_appl_LDADD = $(LDADD)
berlekamp_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_bit_reverse_table_appl_OBJECTS = bit_reverse_table_appl.$(OBJEXT)
bit_reverse_table_appl_OBJECTS = $(am_bit_reverse_table_appl_OBJECTS)
bit_reverse_table_appl_LDADD = $(LDADD)
bit_reverse_table_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_can_zass_appl_OBJECTS = can_zass_appl.$(OBJEXT)
can_zass_appl_OBJECTS = $(am_can_zass_appl_OBJECTS)
can_zass_appl_LDADD = $(LDADD)
can_zass_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_dense_power_series_appl_OBJECTS =  \
	dense_power_series_appl.$(OBJEXT)
dense_power_series_appl_OBJECTS =  \
	$(am_dense_power_series_appl_OBJECTS)
dense_power_series_appl_LDADD = $(LDADD)
dense_power_series_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_dlp_appl_OBJECTS = dlp_appl.$(OBJEXT)
dlp_appl_OBJECTS = $(am_dlp_appl_OBJECTS)
dlp_appl_LDADD = $(LDADD)
dlp_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_dpsr_udigit_mod_appl_OBJECTS = dpsr_udigit_mod_appl.$(OBJEXT)
dpsr_udigit_mod_appl_OBJECTS = $(am_dpsr_udigit_mod_appl_OBJECTS)
dpsr_udigit_mod_appl_LDADD = $(LDADD)
dpsr_udigit_mod_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_factorization_appl_OBJECTS = factorization_appl.$(OBJEXT)
factorization_appl_OBJECTS = $(am_factorization_appl_OBJECTS)
factorization_appl_LDADD = $(LDADD)
factorization_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_fft_prime_appl_OBJECTS = fft_prime_appl.$(OBJEXT)
fft_prime_appl_OBJECTS = $(am_fft_prime_appl_OBJECTS)
fft_prime_appl_LDADD = $(LDADD)
fft_prime_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_fpc_appl_OBJECTS = fpc_appl.$(OBJEXT)
fpc_appl_OBJECTS = $(am_fpc_appl_OBJECTS)
fpc_appl_LDADD = $(LDADD)
fpc_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_galois_field_iterator_appl_OBJECTS =  \
	galois_field_iterator_appl.$(OBJEXT)
galois_field_iterator_appl_OBJECTS =  \
	$(am_galois_field_iterator_appl_OBJECTS)
galois_field_iterator_appl_LDADD = $(LDADD)
galois_field_iterator_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_appl_OBJECTS = gf2n_appl.$(OBJEXT)
gf2n_appl_OBJECTS = $(am_gf2n_appl_OBJECTS)
gf2n_appl_LDADD = $(LDADD)
gf2n_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_find_root_appl_OBJECTS = gf2n_find_root_appl.$(OBJEXT)
gf2n_find_root_appl_OBJECTS = $(am_gf2n_find_root_appl_OBJECTS)
gf2n_find_root_appl_LDADD = $(LDADD)
gf2n_find_root_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_poly_modulus_appl_OBJECTS = gf2n_poly_modulus_appl.$(OBJEXT)
gf2n_poly_modulus_appl_OBJECTS = $(am_gf2n_poly_modulus_appl_OBJECTS)
gf2n_poly_modulus_appl_LDADD = $(LDADD)
gf2n_poly_modulus_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_polynomial_appl_OBJECTS = gf2n_polynomial_appl.$(OBJEXT)
gf2n_polynomial_appl_OBJECTS = $(am_gf2n_polynomial_appl_OBJECTS)
gf2n_polynomial_appl_LDADD = $(LDADD)
gf2n_polynomial_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_rational_function_appl_OBJECTS =  \
	gf2n_rational_function_appl.$(OBJEXT)
gf2n_rational_function_appl_OBJECTS =  \
	$(am_gf2n_rational_function_appl_OBJECTS)
gf2n_rational_function_appl_LDADD = $(LDADD)
gf2n_rational_function_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf_pol_appl_OBJECTS = gf_pol_appl.$(OBJEXT)
gf_pol_appl_OBJECTS = $(am_gf_pol_appl_OBJECTS)
gf_pol_appl_LDADD = $(LDADD)
gf_pol_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf_pol_factor_appl_OBJECTS = gf_pol_factor_appl.$(OBJEXT)
gf_pol_factor_appl_OBJECTS = $(am_gf_pol_factor_appl_OBJECTS)
gf_pol_factor_appl_LDADD = $(LDADD)
gf_pol_factor_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gfpn_appl_OBJECTS = gfpn_appl.$(OBJEXT)
gfpn_appl_OBJECTS = $(am_gfpn_appl_OBJECTS)
gfpn_appl_LDADD = $(LDADD)
gfpn_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_sparse_power_series_appl_OBJECTS =  \
	sparse_power_series_appl.$(OBJEXT)
sparse_power_series_appl_OBJECTS =  \
	$(am_sparse_power_series_appl_OBJECTS)
sparse_power_series_appl_LDADD = $(LDADD)
sparse_power_series_appl_DEPENDENCIES = $(LIDIA_LTLIB)
DEFAULT_INCLUDES = 
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(Fp_pol_factor_appl_SOURCES) \
	$(Fp_polynomial_test_appl_SOURCES) \
	$(Fp_rational_function_appl_SOURCES) $(berlekamp_appl_SOURCES) \
	$(bit_reverse_table_appl_SOURCES) $(can_zass_appl_SOURCES) \
	$(dense_power_series_appl_SOURCES) $(dlp_appl_SOURCES) \
	$(dpsr_udigit_mod_appl_SOURCES) $(factorization_appl_SOURCES) \
	$(fft_prime_appl_SOURCES) $(fpc_appl_SOURCES) \
	$(galois_field_iterator_appl_SOURCES) $(gf2n_appl_SOURCES) \
	$(gf2n_find_root_appl_SOURCES) \
	$(gf2n_poly_modulus_appl_SOURCES) \
	$(gf2n_polynomial_appl_SOURCES) \
	$(gf2n_rational_function_appl_SOURCES) $(gf_pol_appl_SOURCES) \
	$(gf_pol_factor_appl_SOURCES) $(gfpn_appl_SOURCES) \
	$(sparse_power_series_appl_SOURCES)
DIST_SOURCES = $(Fp_pol_factor_appl_SOURCES) \
	$(Fp_polynomial_test_appl_SOURCES) \
	$(Fp_rational_function_appl_SOURCES) $(berlekamp_appl_SOURCES) \
	$(bit_reverse_table_appl_SOURCES) $(can_zass_appl_SOURCES) \
	$(dense_power_series_appl_SOURCES) $(dlp_appl_SOURCES) \
	$(dpsr_udigit_mod_appl_SOURCES) $(factorization_appl_SOURCES) \
	$(fft_prime_appl_SOURCES) $(fpc_appl_SOURCES) \
	$(galois_field_iterator_appl_SOURCES) $(gf2n_appl_SOURCES) \
	$(gf2n_find_root_appl_SOURCES) \
	$(gf2n_poly_modulus_appl_SOURCES) \
	$(gf2n_polynomial_appl_SOURCES) \
	$(gf2n_rational_function_appl_SOURCES) $(gf_pol_appl_SOURCES) \
	$(gf_pol_factor_appl_SOURCES) $(gfpn_appl_SOURCES) \
	$(sparse_power_series_appl_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BIBTEX = @BIBTEX@
BUNZIP2 = @BUNZIP2@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
DVIPS = @DVIPS@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GREP = @GREP@
GUNZIP = @GUNZIP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LATEX = @LATEX@
LATEX2HTML = @LATEX2HTML@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIDIA_BASE_XLIBOBJS = @LIDIA_BASE_XLIBOBJS@
LIDIA_BASE_XLTLIBOBJS = @LIDIA_BASE_XLTLIBOBJS@
LIDIA_LTCLIBS = @LIDIA_LTCLIBS@
LIDIA_LT_XLIBOBJS = @LIDIA_LT_XLIBOBJS@
LIDIA_LT_XLTLIBOBJS = @LIDIA_LT_XLTLIBOBJS@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINDEX = @MAKEINDEX@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PDFLATEX = @PDFLATEX@
PKG_DIRS = @PKG_DIRS@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
TEXI2DVI = @TEXI2DVI@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
lt_ECHO = @lt_ECHO@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
AUTOMAKE_OPTIONS = 1.5 nostdinc
ETAGS_ARGS = -C -l c++

#
# Use the following prefix for stuff that is normally found in ${top_srcdir}
# but must be specified in a simple-minded fashion (i.e. ${top_builddir}).
# Note that the normal path can be made by prepending ${srcdir}/,
# though that results in weird paths like ../../../library/base/../../xxx.
#
topdir = ${top_builddir}

#
# Main directories of the LiDIA packages
#
LIDIA_DATADIR = ${topdir}/share
LIDIA_PKGDATADIR = ${LIDIA_DATADIR}/LiDIA
LIDIA_CONFIG_LINKDIR = ${top_builddir}/src/base/interfaces
LIDIA_CONFIG_SRCDIR = ${topdir}/src/interfaces
LIDIA_CONFIG_INCLUDEDIR = ${top_builddir}/include
LIDIA_CONFIG_PKGINCLUDEDIR = ${LIDIA_CONFIG_INCLUDEDIR}/LiDIA
LIDIA_PORTAB_SRCDIR = ${topdir}/src/portability
LIDIA_BASE_SRCDIR = ${topdir}/src/base
LIDIA_BASE_INCLUDEDIR = ${LIDIA_BASE_SRCDIR}/include
LIDIA_BASE_PKGINCLUDEDIR = ${LIDIA_BASE_INCLUDEDIR}/LiDIA
LIDIA_FF_SRCDIR = ${topdir}/src/finite_fields
LIDIA_FF_INCLUDEDIR = ${LIDIA_FF_SRCDIR}/include
LIDIA_FF_PKGINCLUDEDIR = ${LIDIA_FF_INCLUDEDIR}/LiDIA
LIDIA_LA_SRCDIR = ${topdir}/src/linear_algebra
LIDIA_LA_INCLUDEDIR = ${LIDIA_LA_SRCDIR}/include
LIDIA_LA_PKGINCLUDEDIR = ${LIDIA_LA_INCLUDEDIR}/LiDIA
LIDIA_LT_SRCDIR = ${topdir}/src/lattices
LIDIA_LT_INCLUDEDIR = ${LIDIA_LT_SRCDIR}/include
LIDIA_LT_PKGINCLUDEDIR = ${LIDIA_LT_INCLUDEDIR}/LiDIA
LIDIA_NF_SRCDIR = ${topdir}/src/number_fields
LIDIA_NF_INCLUDEDIR = ${LIDIA_NF_SRCDIR}/include
LIDIA_NF_PKGINCLUDEDIR = ${LIDIA_NF_INCLUDEDIR}/LiDIA
LIDIA_EC_SRCDIR = ${topdir}/src/elliptic_curves
LIDIA_EC_INCLUDEDIR = ${LIDIA_EC_SRCDIR}/include
LIDIA_EC_PKGINCLUDEDIR = ${LIDIA_EC_INCLUDEDIR}/LiDIA
LIDIA_ECO_SRCDIR = ${topdir}/src/ec_order
LIDIA_ECO_INCLUDEDIR = ${LIDIA_ECO_SRCDIR}/include
LIDIA_ECO_PKGINCLUDEDIR = ${LIDIA_ECO_INCLUDEDIR}/LiDIA
LIDIA_GEC_SRCDIR = ${topdir}/src/gec
LIDIA_GEC_INCLUDEDIR = ${LIDIA_GEC_SRCDIR}/include
LIDIA_GEC_PKGINCLUDEDIR = ${LIDIA_GEC_INCLUDEDIR}/LiDIA

#
# Path to the Libtool library libLiDIA.la resulting from the build
#
LIDIA_LTLIB = ${top_builddir}/library/libLiDIA.la

#
# libLiDIA's version info for Libtool,
# specified as a triplet CURRENT:REVISION:AGE of non-negative integers.
# CURRENT identifies the set of object interfaces exported by the library.
# REVISION specifies CURRENT's implementation release number.
# AGE specifies how many interface sets preceding CURRENT are supported.
# The precise meaning of the version info numbers is defined in the Libtool
# texinfo manual, together with rules for updating them.
# Never try to achieve similarity with the package version!
#
LIDIA_LTVERSION = 7:0:0

#
# Paths to each package's Libtool convenience library.
# The configure-determined variable LIDIA_LTCLIBS refers
# to a subset of these variables.
#
LIDIA_BASE_LTCLIB = ${top_builddir}/library/base/libLiDIA-base.la
LIDIA_FF_LTCLIB = ${top_builddir}/library/finite_fields/libLiDIA-FF.la
LIDIA_LA_LTCLIB = ${top_builddir}/library/linear_algebra/libLiDIA-LA.la
LIDIA_LT_LTCLIB = ${top_builddir}/library/lattices/libLiDIA-LT.la
LIDIA_NF_LTCLIB = ${top_builddir}/library/number_fields/libLiDIA-NF.la
LIDIA_EC_LTCLIB = ${top_builddir}/library/elliptic_curves/libLiDIA-EC.la
LIDIA_ECO_LTCLIB = ${top_builddir}/library/ec_order/libLiDIA-ECO.la
LIDIA_GEC_LTCLIB = ${top_builddir}/library/gec/libLiDIA-GEC.la
AM_CPPFLAGS = \
	-I$(LIDIA_CONFIG_INCLUDEDIR) \
	-I$(LIDIA_BASE_INCLUDEDIR) -I$(srcdir)/$(LIDIA_BASE_INCLUDEDIR) \
	-I$(LIDIA_FF_INCLUDEDIR) -I$(srcdir)/$(LIDIA_FF_INCLUDEDIR)

applexecdir = $(pkglibdir)/examples
LDADD = $(LIDIA_LTLIB)
factorization_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc

Fp_polynomial_test_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc

Fp_rational_function_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc

dlp_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc

fpc_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc

Fp_pol_factor_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc

berlekamp_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc

can_zass_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc

gf_pol_factor_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc

bit_reverse_table_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc

fft_prime_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc

gf2n_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc

gf2n_find_root_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc

gf2n_poly_modulus_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc

gf2n_polynomial_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc

gf2n_rational_function_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc

gf_pol_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc

gfpn_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc

galois_field_iterator_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc

dense_power_series_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc

dpsr_udigit_mod_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc

sparse_power_series_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc

EXTRA_DIST = \
	${LIDIA_FF_SRCDIR}/Fp_polynomial/Fp_poly_modulus_timing.cc \
	${LIDIA_FF_SRCDIR}/fft_prime/test_mul_mod.cc \
	${LIDIA_FF_SRCDIR}/gf2n/gf2n_timing.cc \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/gf2n_poly_modulus_appl.cc.asli \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/gf2n_poly_modulus_timing.cc \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/gf2n_polynomial_timing.cc \
	${LIDIA_FF_SRCDIR}/gfpn/gfpn_timings_appl.cc

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Paths.def $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  examples/finite_fields/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  examples/finite_fields/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-applexecPROGRAMS: $(applexec_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(applexecdir)" || $(MKDIR_P) "$(DESTDIR)$(applexecdir)"
	@list='$(applexec_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(applexecPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(applexecdir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(applexecPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(applexecdir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-applexecPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(applexec_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(applexecdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(applexecdir)/$$f"; \
	done

clean-applexecPROGRAMS:
	@list='$(applexec_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
Fp_pol_factor_appl$(EXEEXT): $(Fp_pol_factor_appl_OBJECTS) $(Fp_pol_factor_appl_DEPENDENCIES) 
	@rm -f Fp_pol_factor_appl$(EXEEXT)
	$(CXXLINK) $(Fp_pol_factor_appl_OBJECTS) $(Fp_pol_factor_appl_LDADD) $(LIBS)
Fp_polynomial_test_appl$(EXEEXT): $(Fp_polynomial_test_appl_OBJECTS) $(Fp_polynomial_test_appl_DEPENDENCIES) 
	@rm -f Fp_polynomial_test_appl$(EXEEXT)
	$(CXXLINK) $(Fp_polynomial_test_appl_OBJECTS) $(Fp_polynomial_test_appl_LDADD) $(LIBS)
Fp_rational_function_appl$(EXEEXT): $(Fp_rational_function_appl_OBJECTS) $(Fp_rational_function_appl_DEPENDENCIES) 
	@rm -f Fp_rational_function_appl$(EXEEXT)
	$(CXXLINK) $(Fp_rational_function_appl_OBJECTS) $(Fp_rational_function_appl_LDADD) $(LIBS)
berlekamp_appl$(EXEEXT): $(berlekamp_appl_OBJECTS) $(berlekamp_appl_DEPENDENCIES) 
	@rm -f berlekamp_appl$(EXEEXT)
	$(CXXLINK) $(berlekamp_appl_OBJECTS) $(berlekamp_appl_LDADD) $(LIBS)
bit_reverse_table_appl$(EXEEXT): $(bit_reverse_table_appl_OBJECTS) $(bit_reverse_table_appl_DEPENDENCIES) 
	@rm -f bit_reverse_table_appl$(EXEEXT)
	$(CXXLINK) $(bit_reverse_table_appl_OBJECTS) $(bit_reverse_table_appl_LDADD) $(LIBS)
can_zass_appl$(EXEEXT): $(can_zass_appl_OBJECTS) $(can_zass_appl_DEPENDENCIES) 
	@rm -f can_zass_appl$(EXEEXT)
	$(CXXLINK) $(can_zass_appl_OBJECTS) $(can_zass_appl_LDADD) $(LIBS)
dense_power_series_appl$(EXEEXT): $(dense_power_series_appl_OBJECTS) $(dense_power_series_appl_DEPENDENCIES) 
	@rm -f dense_power_series_appl$(EXEEXT)
	$(CXXLINK) $(dense_power_series_appl_OBJECTS) $(dense_power_series_appl_LDADD) $(LIBS)
dlp_appl$(EXEEXT): $(dlp_appl_OBJECTS) $(dlp_appl_DEPENDENCIES) 
	@rm -f dlp_appl$(EXEEXT)
	$(CXXLINK) $(dlp_appl_OBJECTS) $(dlp_appl_LDADD) $(LIBS)
dpsr_udigit_mod_appl$(EXEEXT): $(dpsr_udigit_mod_appl_OBJECTS) $(dpsr_udigit_mod_appl_DEPENDENCIES) 
	@rm -f dpsr_udigit_mod_appl$(EXEEXT)
	$(CXXLINK) $(dpsr_udigit_mod_appl_OBJECTS) $(dpsr_udigit_mod_appl_LDADD) $(LIBS)
factorization_appl$(EXEEXT): $(factorization_appl_OBJECTS) $(factorization_appl_DEPENDENCIES) 
	@rm -f factorization_appl$(EXEEXT)
	$(CXXLINK) $(factorization_appl_OBJECTS) $(factorization_appl_LDADD) $(LIBS)
fft_prime_appl$(EXEEXT): $(fft_prime_appl_OBJECTS) $(fft_prime_appl_DEPENDENCIES) 
	@rm -f fft_prime_appl$(EXEEXT)
	$(CXXLINK) $(fft_prime_appl_OBJECTS) $(fft_prime_appl_LDADD) $(LIBS)
fpc_appl$(EXEEXT): $(fpc_appl_OBJECTS) $(fpc_appl_DEPENDENCIES) 
	@rm -f fpc_appl$(EXEEXT)
	$(CXXLINK) $(fpc_appl_OBJECTS) $(fpc_appl_LDADD) $(LIBS)
galois_field_iterator_appl$(EXEEXT): $(galois_field_iterator_appl_OBJECTS) $(galois_field_iterator_appl_DEPENDENCIES) 
	@rm -f galois_field_iterator_appl$(EXEEXT)
	$(CXXLINK) $(galois_field_iterator_appl_OBJECTS) $(galois_field_iterator_appl_LDADD) $(LIBS)
gf2n_appl$(EXEEXT): $(gf2n_appl_OBJECTS) $(gf2n_appl_DEPENDENCIES) 
	@rm -f gf2n_appl$(EXEEXT)
	$(CXXLINK) $(gf2n_appl_OBJECTS) $(gf2n_appl_LDADD) $(LIBS)
gf2n_find_root_appl$(EXEEXT): $(gf2n_find_root_appl_OBJECTS) $(gf2n_find_root_appl_DEPENDENCIES) 
	@rm -f gf2n_find_root_appl$(EXEEXT)
	$(CXXLINK) $(gf2n_find_root_appl_OBJECTS) $(gf2n_find_root_appl_LDADD) $(LIBS)
gf2n_poly_modulus_appl$(EXEEXT): $(gf2n_poly_modulus_appl_OBJECTS) $(gf2n_poly_modulus_appl_DEPENDENCIES) 
	@rm -f gf2n_poly_modulus_appl$(EXEEXT)
	$(CXXLINK) $(gf2n_poly_modulus_appl_OBJECTS) $(gf2n_poly_modulus_appl_LDADD) $(LIBS)
gf2n_polynomial_appl$(EXEEXT): $(gf2n_polynomial_appl_OBJECTS) $(gf2n_polynomial_appl_DEPENDENCIES) 
	@rm -f gf2n_polynomial_appl$(EXEEXT)
	$(CXXLINK) $(gf2n_polynomial_appl_OBJECTS) $(gf2n_polynomial_appl_LDADD) $(LIBS)
gf2n_rational_function_appl$(EXEEXT): $(gf2n_rational_function_appl_OBJECTS) $(gf2n_rational_function_appl_DEPENDENCIES) 
	@rm -f gf2n_rational_function_appl$(EXEEXT)
	$(CXXLINK) $(gf2n_rational_function_appl_OBJECTS) $(gf2n_rational_function_appl_LDADD) $(LIBS)
gf_pol_appl$(EXEEXT): $(gf_pol_appl_OBJECTS) $(gf_pol_appl_DEPENDENCIES) 
	@rm -f gf_pol_appl$(EXEEXT)
	$(CXXLINK) $(gf_pol_appl_OBJECTS) $(gf_pol_appl_LDADD) $(LIBS)
gf_pol_factor_appl$(EXEEXT): $(gf_pol_factor_appl_OBJECTS) $(gf_pol_factor_appl_DEPENDENCIES) 
	@rm -f gf_pol_factor_appl$(EXEEXT)
	$(CXXLINK) $(gf_pol_factor_appl_OBJECTS) $(gf_pol_factor_appl_LDADD) $(LIBS)
gfpn_appl$(EXEEXT): $(gfpn_appl_OBJECTS) $(gfpn_appl_DEPENDENCIES) 
	@rm -f gfpn_appl$(EXEEXT)
	$(CXXLINK) $(gfpn_appl_OBJECTS) $(gfpn_appl_LDADD) $(LIBS)
sparse_power_series_appl$(EXEEXT): $(sparse_power_series_appl_OBJECTS) $(sparse_power_series_appl_DEPENDENCIES) 
	@rm -f sparse_power_series_appl$(EXEEXT)
	$(CXXLINK) $(sparse_power_series_appl_OBJECTS) $(sparse_power_series_appl_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Fp_pol_factor_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Fp_polynomial_test_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/Fp_rational_function_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/berlekamp_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bit_reverse_table_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/can_zass_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dense_power_series_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dlp_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dpsr_udigit_mod_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/factorization_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fft_prime_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fpc_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/galois_field_iterator_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gf2n_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gf2n_find_root_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gf2n_poly_modulus_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gf2n_polynomial_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gf2n_rational_function_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gf_pol_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gf_pol_factor_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gfpn_appl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sparse_power_series_appl.Po@am__quote@

.cc.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

Fp_pol_factor_appl.o: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_pol_factor_appl.o -MD -MP -MF $(DEPDIR)/Fp_pol_factor_appl.Tpo -c -o Fp_pol_factor_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/Fp_pol_factor_appl.Tpo $(DEPDIR)/Fp_pol_factor_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc' object='Fp_pol_factor_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_pol_factor_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc

Fp_pol_factor_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_pol_factor_appl.obj -MD -MP -MF $(DEPDIR)/Fp_pol_factor_appl.Tpo -c -o Fp_pol_factor_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/Fp_pol_factor_appl.Tpo $(DEPDIR)/Fp_pol_factor_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc' object='Fp_pol_factor_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_pol_factor_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; fi`

Fp_polynomial_test_appl.o: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_polynomial_test_appl.o -MD -MP -MF $(DEPDIR)/Fp_polynomial_test_appl.Tpo -c -o Fp_polynomial_test_appl.o `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/Fp_polynomial_test_appl.Tpo $(DEPDIR)/Fp_polynomial_test_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc' object='Fp_polynomial_test_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_polynomial_test_appl.o `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc

Fp_polynomial_test_appl.obj: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_polynomial_test_appl.obj -MD -MP -MF $(DEPDIR)/Fp_polynomial_test_appl.Tpo -c -o Fp_polynomial_test_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/Fp_polynomial_test_appl.Tpo $(DEPDIR)/Fp_polynomial_test_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc' object='Fp_polynomial_test_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_polynomial_test_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; fi`

Fp_rational_function_appl.o: $(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_rational_function_appl.o -MD -MP -MF $(DEPDIR)/Fp_rational_function_appl.Tpo -c -o Fp_rational_function_appl.o `test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/Fp_rational_function_appl.Tpo $(DEPDIR)/Fp_rational_function_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc' object='Fp_rational_function_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_rational_function_appl.o `test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc

Fp_rational_function_appl.obj: $(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_rational_function_appl.obj -MD -MP -MF $(DEPDIR)/Fp_rational_function_appl.Tpo -c -o Fp_rational_function_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/Fp_rational_function_appl.Tpo $(DEPDIR)/Fp_rational_function_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc' object='Fp_rational_function_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_rational_function_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; fi`

berlekamp_appl.o: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT berlekamp_appl.o -MD -MP -MF $(DEPDIR)/berlekamp_appl.Tpo -c -o berlekamp_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/berlekamp_appl.Tpo $(DEPDIR)/berlekamp_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc' object='berlekamp_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o berlekamp_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc

berlekamp_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT berlekamp_appl.obj -MD -MP -MF $(DEPDIR)/berlekamp_appl.Tpo -c -o berlekamp_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/berlekamp_appl.Tpo $(DEPDIR)/berlekamp_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc' object='berlekamp_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o berlekamp_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; fi`

bit_reverse_table_appl.o: $(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bit_reverse_table_appl.o -MD -MP -MF $(DEPDIR)/bit_reverse_table_appl.Tpo -c -o bit_reverse_table_appl.o `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/bit_reverse_table_appl.Tpo $(DEPDIR)/bit_reverse_table_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc' object='bit_reverse_table_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bit_reverse_table_appl.o `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc

bit_reverse_table_appl.obj: $(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bit_reverse_table_appl.obj -MD -MP -MF $(DEPDIR)/bit_reverse_table_appl.Tpo -c -o bit_reverse_table_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/bit_reverse_table_appl.Tpo $(DEPDIR)/bit_reverse_table_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc' object='bit_reverse_table_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bit_reverse_table_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; fi`

can_zass_appl.o: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT can_zass_appl.o -MD -MP -MF $(DEPDIR)/can_zass_appl.Tpo -c -o can_zass_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/can_zass_appl.Tpo $(DEPDIR)/can_zass_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc' object='can_zass_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o can_zass_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc

can_zass_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT can_zass_appl.obj -MD -MP -MF $(DEPDIR)/can_zass_appl.Tpo -c -o can_zass_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/can_zass_appl.Tpo $(DEPDIR)/can_zass_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc' object='can_zass_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o can_zass_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; fi`

dense_power_series_appl.o: $(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dense_power_series_appl.o -MD -MP -MF $(DEPDIR)/dense_power_series_appl.Tpo -c -o dense_power_series_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/dense_power_series_appl.Tpo $(DEPDIR)/dense_power_series_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc' object='dense_power_series_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dense_power_series_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc

dense_power_series_appl.obj: $(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dense_power_series_appl.obj -MD -MP -MF $(DEPDIR)/dense_power_series_appl.Tpo -c -o dense_power_series_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/dense_power_series_appl.Tpo $(DEPDIR)/dense_power_series_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc' object='dense_power_series_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dense_power_series_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; fi`

dlp_appl.o: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dlp_appl.o -MD -MP -MF $(DEPDIR)/dlp_appl.Tpo -c -o dlp_appl.o `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/dlp_appl.Tpo $(DEPDIR)/dlp_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc' object='dlp_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dlp_appl.o `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc

dlp_appl.obj: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dlp_appl.obj -MD -MP -MF $(DEPDIR)/dlp_appl.Tpo -c -o dlp_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/dlp_appl.Tpo $(DEPDIR)/dlp_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc' object='dlp_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dlp_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; fi`

dpsr_udigit_mod_appl.o: $(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dpsr_udigit_mod_appl.o -MD -MP -MF $(DEPDIR)/dpsr_udigit_mod_appl.Tpo -c -o dpsr_udigit_mod_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/dpsr_udigit_mod_appl.Tpo $(DEPDIR)/dpsr_udigit_mod_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc' object='dpsr_udigit_mod_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dpsr_udigit_mod_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc

dpsr_udigit_mod_appl.obj: $(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dpsr_udigit_mod_appl.obj -MD -MP -MF $(DEPDIR)/dpsr_udigit_mod_appl.Tpo -c -o dpsr_udigit_mod_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/dpsr_udigit_mod_appl.Tpo $(DEPDIR)/dpsr_udigit_mod_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc' object='dpsr_udigit_mod_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dpsr_udigit_mod_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; fi`

factorization_appl.o: $(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT factorization_appl.o -MD -MP -MF $(DEPDIR)/factorization_appl.Tpo -c -o factorization_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/factorization_appl.Tpo $(DEPDIR)/factorization_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc' object='factorization_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o factorization_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc

factorization_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT factorization_appl.obj -MD -MP -MF $(DEPDIR)/factorization_appl.Tpo -c -o factorization_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/factorization_appl.Tpo $(DEPDIR)/factorization_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc' object='factorization_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o factorization_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; fi`

fft_prime_appl.o: $(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fft_prime_appl.o -MD -MP -MF $(DEPDIR)/fft_prime_appl.Tpo -c -o fft_prime_appl.o `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/fft_prime_appl.Tpo $(DEPDIR)/fft_prime_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc' object='fft_prime_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fft_prime_appl.o `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc

fft_prime_appl.obj: $(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fft_prime_appl.obj -MD -MP -MF $(DEPDIR)/fft_prime_appl.Tpo -c -o fft_prime_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/fft_prime_appl.Tpo $(DEPDIR)/fft_prime_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc' object='fft_prime_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fft_prime_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; fi`

fpc_appl.o: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fpc_appl.o -MD -MP -MF $(DEPDIR)/fpc_appl.Tpo -c -o fpc_appl.o `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/fpc_appl.Tpo $(DEPDIR)/fpc_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc' object='fpc_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fpc_appl.o `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc

fpc_appl.obj: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fpc_appl.obj -MD -MP -MF $(DEPDIR)/fpc_appl.Tpo -c -o fpc_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/fpc_appl.Tpo $(DEPDIR)/fpc_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc' object='fpc_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fpc_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; fi`

galois_field_iterator_appl.o: $(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT galois_field_iterator_appl.o -MD -MP -MF $(DEPDIR)/galois_field_iterator_appl.Tpo -c -o galois_field_iterator_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/galois_field_iterator_appl.Tpo $(DEPDIR)/galois_field_iterator_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc' object='galois_field_iterator_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o galois_field_iterator_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc

galois_field_iterator_appl.obj: $(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT galois_field_iterator_appl.obj -MD -MP -MF $(DEPDIR)/galois_field_iterator_appl.Tpo -c -o galois_field_iterator_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/galois_field_iterator_appl.Tpo $(DEPDIR)/galois_field_iterator_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc' object='galois_field_iterator_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o galois_field_iterator_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; fi`

gf2n_appl.o: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_appl.o -MD -MP -MF $(DEPDIR)/gf2n_appl.Tpo -c -o gf2n_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_appl.Tpo $(DEPDIR)/gf2n_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc' object='gf2n_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc

gf2n_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_appl.Tpo -c -o gf2n_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_appl.Tpo $(DEPDIR)/gf2n_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc' object='gf2n_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; fi`

gf2n_find_root_appl.o: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_find_root_appl.o -MD -MP -MF $(DEPDIR)/gf2n_find_root_appl.Tpo -c -o gf2n_find_root_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_find_root_appl.Tpo $(DEPDIR)/gf2n_find_root_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc' object='gf2n_find_root_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_find_root_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc

gf2n_find_root_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_find_root_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_find_root_appl.Tpo -c -o gf2n_find_root_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_find_root_appl.Tpo $(DEPDIR)/gf2n_find_root_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc' object='gf2n_find_root_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_find_root_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; fi`

gf2n_poly_modulus_appl.o: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_poly_modulus_appl.o -MD -MP -MF $(DEPDIR)/gf2n_poly_modulus_appl.Tpo -c -o gf2n_poly_modulus_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_poly_modulus_appl.Tpo $(DEPDIR)/gf2n_poly_modulus_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc' object='gf2n_poly_modulus_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_poly_modulus_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc

gf2n_poly_modulus_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_poly_modulus_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_poly_modulus_appl.Tpo -c -o gf2n_poly_modulus_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_poly_modulus_appl.Tpo $(DEPDIR)/gf2n_poly_modulus_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc' object='gf2n_poly_modulus_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_poly_modulus_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; fi`

gf2n_polynomial_appl.o: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_polynomial_appl.o -MD -MP -MF $(DEPDIR)/gf2n_polynomial_appl.Tpo -c -o gf2n_polynomial_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_polynomial_appl.Tpo $(DEPDIR)/gf2n_polynomial_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc' object='gf2n_polynomial_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_polynomial_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc

gf2n_polynomial_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_polynomial_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_polynomial_appl.Tpo -c -o gf2n_polynomial_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_polynomial_appl.Tpo $(DEPDIR)/gf2n_polynomial_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc' object='gf2n_polynomial_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_polynomial_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; fi`

gf2n_rational_function_appl.o: $(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_rational_function_appl.o -MD -MP -MF $(DEPDIR)/gf2n_rational_function_appl.Tpo -c -o gf2n_rational_function_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_rational_function_appl.Tpo $(DEPDIR)/gf2n_rational_function_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc' object='gf2n_rational_function_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_rational_function_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc

gf2n_rational_function_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_rational_function_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_rational_function_appl.Tpo -c -o gf2n_rational_function_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf2n_rational_function_appl.Tpo $(DEPDIR)/gf2n_rational_function_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc' object='gf2n_rational_function_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_rational_function_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; fi`

gf_pol_appl.o: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_appl.o -MD -MP -MF $(DEPDIR)/gf_pol_appl.Tpo -c -o gf_pol_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf_pol_appl.Tpo $(DEPDIR)/gf_pol_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc' object='gf_pol_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc

gf_pol_appl.obj: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_appl.obj -MD -MP -MF $(DEPDIR)/gf_pol_appl.Tpo -c -o gf_pol_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf_pol_appl.Tpo $(DEPDIR)/gf_pol_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc' object='gf_pol_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; fi`

gf_pol_factor_appl.o: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_factor_appl.o -MD -MP -MF $(DEPDIR)/gf_pol_factor_appl.Tpo -c -o gf_pol_factor_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf_pol_factor_appl.Tpo $(DEPDIR)/gf_pol_factor_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc' object='gf_pol_factor_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_factor_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc

gf_pol_factor_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_factor_appl.obj -MD -MP -MF $(DEPDIR)/gf_pol_factor_appl.Tpo -c -o gf_pol_factor_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gf_pol_factor_appl.Tpo $(DEPDIR)/gf_pol_factor_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc' object='gf_pol_factor_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_factor_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; fi`

gfpn_appl.o: $(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gfpn_appl.o -MD -MP -MF $(DEPDIR)/gfpn_appl.Tpo -c -o gfpn_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gfpn_appl.Tpo $(DEPDIR)/gfpn_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc' object='gfpn_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gfpn_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc

gfpn_appl.obj: $(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gfpn_appl.obj -MD -MP -MF $(DEPDIR)/gfpn_appl.Tpo -c -o gfpn_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/gfpn_appl.Tpo $(DEPDIR)/gfpn_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc' object='gfpn_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gfpn_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; fi`

sparse_power_series_appl.o: $(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sparse_power_series_appl.o -MD -MP -MF $(DEPDIR)/sparse_power_series_appl.Tpo -c -o sparse_power_series_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/sparse_power_series_appl.Tpo $(DEPDIR)/sparse_power_series_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc' object='sparse_power_series_appl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sparse_power_series_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc

sparse_power_series_appl.obj: $(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sparse_power_series_appl.obj -MD -MP -MF $(DEPDIR)/sparse_power_series_appl.Tpo -c -o sparse_power_series_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; fi`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/sparse_power_series_appl.Tpo $(DEPDIR)/sparse_power_series_appl.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc' object='sparse_power_series_appl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sparse_power_series_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(applexecdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-applexecPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-applexecPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-applexecPROGRAMS
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) uninstall-hook

.MAKE: install-am install-strip uninstall-am

.PHONY: CTAGS GTAGS all all-am check check-am clean \
	clean-applexecPROGRAMS clean-generic clean-libtool ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am \
	install-applexecPROGRAMS install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-applexecPROGRAMS uninstall-hook


 #

$(applexec_PROGRAMS): $(LIDIA_LTLIB)

# Remove installation subdirectories after uninstalling, unless left non-empty.
uninstall-hook:
	rmdir	$(DESTDIR)$(applexecdir) \
		$(DESTDIR)$(pkglibdir) \
		2>/dev/null; :

# Delete half-made targets when their commands fail
.DELETE_ON_ERROR:
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
